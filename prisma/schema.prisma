// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Poker {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  VoteChoice PokerVote[]
}

model UsersInVote {
  id     String  @id @default(cuid())
  updatedAt DateTime @updatedAt 
  voteId String
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  anonUser   AnonUser? @relation(fields: [anonUserId], references: [id])
  anonUserId String?

  @@unique([voteId, anonUserId])
  @@unique([voteId, userId])
  @@index([voteId, anonUserId])
  @@index([voteId, userId])
  @@index([anonUserId])
  @@index([userId])
}

model PokerVote {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  vote       Poker     @relation(fields: [voteId], references: [id])
  voteId     String
  choice     String
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
  anonUser   AnonUser? @relation(fields: [anonUserId], references: [id])
  anonUserId String?

  @@unique([voteId, anonUserId])
  @@unique([voteId, userId])
  @@index([voteId])
  @@index([anonUserId, voteId])
  @@index([userId, voteId])
}

model AnonUser {
  id        String   @id @unique @default(cuid())
  secret    String   @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  voteId    String

  voteChoice PokerVote[]
  userInVote UsersInVote[]

  @@index([voteId])
  @@index([secret])
  @@index([id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  voteChoice    PokerVote[]
  usrInVote     UsersInVote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
