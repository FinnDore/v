// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Poker {
  id                  String        @id @default(cuid())
  title               String?       @db.Text
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  createdByAnonUser   AnonUser?     @relation(fields: [createdByAnonUserId], references: [id], onDelete: Cascade)
  createdByAnonUserId String?
  createdByUser       User?         @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByUserId     String?
  private             Boolean       @default(true)
  pokerVote           PokerVote[]
  userInVote          UsersInVote[]

  @@unique([id, createdByUserId])
  @@unique([id, createdByAnonUserId])
  @@index([createdByUserId])
  @@index([createdByAnonUserId])
}

model PokerVote {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  poker       Poker             @relation(fields: [pokerId], references: [id], onDelete: Cascade)
  pokerId     String
  voteChoice  PokerVoteChoice[]
  title       String            @db.Text
  description String?           @db.LongText
  active      Boolean           @default(true)
  showResults Boolean           @default(false)

  @@index([pokerId])
}

model PokerVoteChoice {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  pokerVote   PokerVote @relation(fields: [pokerVoteId], references: [id], onDelete: Cascade)
  pokerVoteId String
  choice      String
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
  anonUser    AnonUser? @relation(fields: [anonUserId], references: [id], onDelete: Cascade)
  anonUserId  String?

  @@unique([pokerVoteId, anonUserId])
  @@unique([pokerVoteId, userId])
  @@index([pokerVoteId])
  @@index([anonUserId, pokerVoteId])
  @@index([userId, pokerVoteId])
  @@index([choice])
}

model LandingPokerVoteChoice {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  choice      String
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
  anonUser    AnonUser? @relation(fields: [anonUserId], references: [id], onDelete: Cascade)
  anonUserId  String?

  @@unique([anonUserId])
  @@unique([userId])
  @@unique([id])
  @@index([anonUserId])
  @@index([userId])
  @@index([id])
}

model UsersInVote {
  id          String   @id @default(cuid())
  updatedAt   DateTime @updatedAt
  voteId      String
  poker       Poker    @relation(fields: [voteId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  whiteListed Boolean  @default(false)
  anonUser   AnonUser? @relation(fields: [anonUserId], references: [id], onDelete: Cascade)
  anonUserId String?

  @@unique([voteId, anonUserId])
  @@unique([voteId, userId])
  @@index([voteId, anonUserId])
  @@index([voteId, userId])
  @@index([anonUserId])
  @@index([userId])
}

model AnonUser {
  id        String   @id @unique @default(cuid())
  secret    String   @default(cuid())
  name      String
  pfpHash   String   @default("ghd44")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  voteChoice             PokerVoteChoice[]
  userInVote             UsersInVote[]
  Poker                  Poker[]
  LandingPokerVoteChoice LandingPokerVoteChoice[]

  @@index([secret])
  @@index([id])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                     String                   @id @default(cuid())
  name                   String?
  email                  String?                  @unique
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  voteChoice             PokerVoteChoice[]
  usrInVote              UsersInVote[]
  Poker                  Poker[]
  LandingPokerVoteChoice LandingPokerVoteChoice[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
